trigger:
- master

pr:
- master

stages:

- stage: build

  jobs:

  - job: build

    pool:
      vmImage: ubuntu-latest

    steps:

    - task: DockerCompose@0
      displayName: docker-compose build
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: 'docker-compose.prod.yml'
        action: 'Build services'

  - job: test

    pool:
      vmImage: ubuntu-latest

    variables:
      sdkVersion: 3.1.x
      solutionPath: NotesService
      buildConfiguration: Release

    steps:

    - task: UseDotNet@2
      displayName: dotnet 2.1.x
      inputs:
        packageType: 'sdk'
        version: '2.1.x'

    - task: SonarCloudPrepare@1
      displayName: sonarcloud analysis prepare
      inputs:
        SonarCloud: 'sonarcloud-escalonn'
        organization: '2002-feb24-net'
        scannerMode: 'MSBuild'
        projectKey: '2002-feb24-net_nick-project2-notes-api'
        projectName: 'nick-project2-notes-api'
        extraProperties: 'sonar.cs.opencover.reportsPaths=$(Common.TestResultsDirectory)/*/coverage.opencover.xml'

    - task: UseDotNet@2
      displayName: dotnet $(sdkVersion)
      inputs:
        packageType: 'sdk'
        version: '$(sdkVersion)'

    - script: dotnet build
        --configuration $(buildConfiguration)
      displayName: dotnet build
      workingDirectory: $(solutionPath)

    - script: dotnet test
        --configuration $(buildConfiguration)
        --logger trx
        --no-build
        --results-directory $(Common.TestResultsDirectory)
        --settings coverlet.runsettings
      displayName: dotnet test
      workingDirectory: $(solutionPath)

    - task: SonarCloudAnalyze@1
      displayName: sonarcloud analysis run

    - task: PublishTestResults@2
      displayName: test results build publish
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Common.TestResultsDirectory)/*.trx'

    - task: PublishCodeCoverageResults@1
      displayName: code coverage build publish
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Common.TestResultsDirectory)/*/coverage.cobertura.xml

    - task: SonarCloudPublish@1
      displayName: sonarcloud results build publish
      condition: succeededOrFailed()
      inputs:
        pollingTimeoutSec: '300'

- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: build

  jobs:

  - job: push

  pool:
    vmImage: ubuntu-latest

  steps:

  - task: DockerCompose@0
    displayName: docker-compose build
    inputs:
      containerregistrytype: 'Container Registry'
      dockerComposeFile: 'docker-compose.prod.yml'
      action: 'Build services'

  - task: DockerCompose@0
    displayName: docker-compose push
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'dockerhub-nicholasescalona'
      dockerComposeFile: 'docker-compose.prod.yml'
      action: 'Push services'

    - task: PublishPipelineArtifact@1
      displayName: k8s manifest publish
      inputs:
        targetPath: 'k8s'
        artifact: 'k8s'
        publishLocation: 'pipeline'

  - deployment: deploy_dev

    pool:
      vmImage: ubuntu-latest

    environment: dev

    strategy:
      runOnce:
        deploy:
          steps:

          - task: KubernetesManifest@0
            displayName: kubectl apply
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'dev-default-1588783708961'
              namespace: 'default'
              manifests: '$(Pipeline.Workspace)/k8s/**/*.yml'

          - task: Kubernetes@1
            displayName: kubectl rollout restart
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'dev-default-1588783708961'
              namespace: 'default'
              command: 'rollout'
              useConfigurationFile: true
              configuration: '$(Pipeline.Workspace)/k8s/deployment'
              arguments: 'restart'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
