trigger:
- master

pr:
- master

stages:

- stage: build

  jobs:

  - job: build

    pool:
      vmImage: ubuntu-latest

    steps:

    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: 'docker-compose.prod.yml'
        action: 'Build services'
      displayName: docker-compose build

  - job: test

    pool:
      vmImage: ubuntu-latest

    variables:
      sdkVersion: 3.1.x
      solutionPath: NotesService
      buildConfiguration: Release

    steps:

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '2.1.x'
      displayName: dotnet 2.1.x

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonarcloud-escalonn'
        organization: '2002-feb24-net'
        scannerMode: 'MSBuild'
        projectKey: '2002-feb24-net_nick-project2-notes-api'
        projectName: 'nick-project2-notes-api'
        extraProperties: 'sonar.cs.opencover.reportsPaths=$(Common.TestResultsDirectory)/*/coverage.opencover.xml'
      displayName: sonarcloud analysis prepare

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '$(sdkVersion)'
      displayName: dotnet $(sdkVersion)

    - script: dotnet build
        --configuration $(buildConfiguration)
      workingDirectory: $(solutionPath)
      displayName: dotnet build

    - script: dotnet test
        --configuration $(buildConfiguration)
        --logger trx
        --no-build
        --results-directory $(Common.TestResultsDirectory)
        --settings coverlet.runsettings
      workingDirectory: $(solutionPath)
      displayName: dotnet test

    - task: SonarCloudAnalyze@1
      displayName: sonarcloud analysis run

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Common.TestResultsDirectory)/*.trx'
      displayName: test results build publish

    - task: PublishCodeCoverageResults@1
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Common.TestResultsDirectory)/*/coverage.cobertura.xml
      displayName: code coverage build publish

    - task: SonarCloudPublish@1
      condition: succeededOrFailed()
      inputs:
        pollingTimeoutSec: '300'
      displayName: sonarcloud results build publish

- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: build

  jobs:

  - deployment: deploy_dev

    pool:
      vmImage: ubuntu-latest

    environment: dev

    strategy:
      runOnce:
        deploy:
          steps:

          - checkout: self

          - download: none

          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Container Registry'
              dockerComposeFile: 'docker-compose.prod.yml'
              action: 'Build services'
            displayName: docker-compose build

          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'dockerhub-nicholasescalona'
              dockerComposeFile: 'docker-compose.prod.yml'
              action: 'Push services'
            displayName: docker-compose push

          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'dev-default-1588365583732'
              namespace: 'default'
              manifests: 'k8s/**/*.yml'
            displayName: kubectl apply

          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'dev-default-1588365583732'
              command: 'rollout'
              useConfigurationFile: true
              configuration: 'k8s/deployment'
              arguments: 'restart'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
            displayName: kubectl rollout restart
